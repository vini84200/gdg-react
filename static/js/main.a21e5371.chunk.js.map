{"version":3,"sources":["components/Header.js","components/mocao/Numero.js","components/mocao/MocaoPage.js","App.js","serviceWorker.js","index.js"],"names":["Header","Item","Brand","Numero","props","state","selected","event","this","change_num","target","value","setState","kind","textAlign","onClick","onBlur","static","num","onChange","e","year","React","Component","MocaoPage","undefined","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sOAsBeA,MAjBf,WACE,OACI,kBAAC,WAAD,KACE,kBAAC,IAAD,KACI,kBAAC,IAAOC,KAAR,KACI,kBAAC,IAAOC,MAAR,KACI,qCAGR,kBAAC,IAAOD,KAAR,gB,mCCgCGE,E,YAzCb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,UAAU,GAHK,E,sEAMVC,GACPC,KAAKJ,MAAMK,WAAWF,EAAMG,OAAOC,S,gCAGnCH,KAAKI,SAAS,CACZN,UAAU,M,+BAIZE,KAAKI,SAAS,CACZN,UAAU,M,+BAGJ,IAAD,OACP,OACE,kBAAC,IAAD,CAAOO,KAAK,UACV,kBAAC,IAAD,0CACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,UAAU,QACVC,QAAS,kBAAM,EAAKA,WACpBC,OAAQ,kBAAM,EAAKA,UACnBC,QAAST,KAAKH,MAAMC,SACpBK,MAAOH,KAAKJ,MAAMc,IAClBC,SAAU,SAACC,GAAD,OAAM,EAAKD,SAASC,OAGlC,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOH,QAAM,EAACN,MAAO,MAAQH,KAAKJ,MAAMiB,a,GAnC7BC,IAAMC,WC2BZC,E,YAxBX,WAAYpB,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTa,SAAKO,EACLJ,KAAM,MAJK,E,wEAQRH,GACPV,KAAKI,SAAS,CACVM,IAAKA,M,+BAGL,IAAD,OACP,OACI,kBAAC,WAAD,KACI,kBAAC,IAAD,KACI,2DACA,kBAAC,EAAD,CAAQA,IAAKV,KAAKH,MAAMa,IAAKG,KAAMb,KAAKH,MAAMgB,KAAMZ,WAAY,SAACS,GAAD,OAAS,EAAKT,WAAWS,Y,GAnBjFK,aCQTG,MATf,WACE,OACE,yBAAKC,UAAU,OACX,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a21e5371.chunk.js","sourcesContent":["import React, {Fragment} from 'react';\nimport {Navbar} from 'rbx'\nimport \"rbx/index.css\";\n\n\nfunction Header() {\n  return (\n      <Fragment>\n        <Navbar>\n            <Navbar.Item>\n                <Navbar.Brand>\n                    <h2>GDG</h2>\n                </Navbar.Brand>\n            </Navbar.Item>\n            <Navbar.Item>\n            Home\n            </Navbar.Item>\n        </ Navbar>\n      </Fragment>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Input, Field, Label, Control, Button } from \"rbx\";\n\nclass Numero extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selected: true\n    };\n  }\n  onChange(event) {\n    this.props.change_num(event.target.value);\n  }\n  onClick() {\n    this.setState({\n      selected: true\n    });\n  }\n  onBlur() {\n    this.setState({\n      selected: false\n    });\n  }\n  render() {\n    return (\n      <Field kind=\"addons\">\n        <Label>Projeto de Resolução nº </Label>\n        <Control>\n          <Input\n            textAlign=\"right\"\n            onClick={() => this.onClick()}\n            onBlur={() => this.onBlur()}\n            static={!this.state.selected}\n            value={this.props.num}\n            onChange={(e) =>this.onChange(e)}\n          />\n        </Control>\n        <Control>\n          <Input static value={\" / \" + this.props.year}></Input>\n        </Control>\n      </Field>\n    );\n  }\n}\n\nexport default Numero;\n","import React, { Component, Fragment } from 'react'\nimport {Content} from 'rbx'\nimport PropTypes from 'prop-types'\n\nimport Numero from './Numero'\n\nclass MocaoPage extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            num: undefined,\n            year: 2020\n\n        }\n    }\n    change_num(num) {\n        this.setState({\n            num: num,\n        })\n    }\n  render() {\n    return (\n        <Fragment>\n            <Content>\n                <h1>Proposta de Resolução</h1>\n                <Numero num={this.state.num} year={this.state.year} change_num={(num) => this.change_num(num)} />\n            </Content>\n        </Fragment>\n    );\n  }\n}\nexport default MocaoPage\n","import React from 'react';\nimport \"rbx/index.css\";\nimport Header from './components/Header'\nimport MocaoPage from './components/mocao/MocaoPage'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Header />\n        <MocaoPage />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}